<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Controle de Achados e Perdidos</title>
    <!-- Inclui a biblioteca Tailwind CSS para estilização -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Inclui a biblioteca Font Awesome para ícones -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        /* Estilos para o modal de confirmação */
        .modal {
            display: none; /* Escondido por padrão */
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgb(0,0,0);
            background-color: rgba(0,0,0,0.4);
            justify-content: center;
            align-items: center;
        }
        .modal-content {
            background-color: #1f2937;
            margin: auto;
            padding: 20px;
            border: 1px solid #4b5563;
            width: 80%;
            max-width: 400px;
            border-radius: 0.5rem;
            text-align: center;
        }

        .modal-content-lg {
            background-color: #1f2937;
            margin: auto;
            padding: 20px;
            border: 1px solid #4b5563;
            width: 90%;
            max-width: 900px;
            max-height: 90vh;
            border-radius: 0.5rem;
            text-align: center;
            position: relative;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .modal-buttons {
            display: flex;
            justify-content: center;
            gap: 1rem;
            margin-top: 1.5rem;
        }
        
        /* Estilos da barra de rolagem para navegadores baseados em WebKit */
        ::-webkit-scrollbar {
            width: 8px;
        }

        ::-webkit-scrollbar-track {
            background: #374151;
            border-radius: 10px;
        }

        ::-webkit-scrollbar-thumb {
            background-color: #4b5563;
            border-radius: 10px;
            border: 2px solid #374151;
        }

        ::-webkit-scrollbar-thumb:hover {
            background-color: #5d6776;
        }

        /* Estilos customizados para o input de arquivo */
        .custom-file-input {
            color: transparent;
            font-size: 0;
            overflow: hidden;
        }
        .custom-file-input::-webkit-file-upload-button {
            visibility: hidden;
        }
        .custom-file-input::before {
            content: 'Carregar arquivo';
            display: inline-block;
            background: #2563eb;
            color: white;
            border: none;
            border-radius: 0.5rem;
            padding: 0.5rem 1rem;
            outline: none;
            white-space: nowrap;
            cursor: pointer;
            font-weight: 600;
            font-size: 0.875rem;
            transition: background-color 0.2s;
        }
        .custom-file-input:hover::before {
            background-color: #1d4ed8;
        }
        .custom-file-input:active::before {
            background-color: #1e40af;
        }
        .custom-file-input:disabled::before {
            background-color: #4b5563;
        }
    </style>
</head>
<body class="bg-gray-900 text-gray-300 min-h-screen flex items-center justify-center p-4">

    <!-- Container do Título "Controle de Acessos" -->
    <div id="access-control-title" class="fixed top-0 left-0 w-full p-4 text-center bg-gray-900 z-50 transition-opacity duration-300">
        <h1 class="text-3xl font-bold text-gray-100">Controle de Achados e Perdidos</h1>
    </div>

    <!-- Container principal que alterna entre o formulário de login e a página de conteúdo -->
    <div id="auth-container" class="w-full max-w-sm bg-gray-800 p-8 rounded-xl shadow-lg transition-all duration-300">
        <!-- Título do formulário -->
        <div class="text-center mb-6">
            <h1 class="text-3xl font-bold text-gray-100" id="form-title">Faça Login</h1>
        </div>

        <!-- Formulário de Autenticação -->
        <form id="auth-form" class="space-y-4">
            <div>
                <label for="email" class="block text-sm font-medium text-gray-300">Email</label>
                <input type="email" id="email" name="email" required autocomplete="email" class="mt-1 block w-full px-4 py-2 bg-gray-700 text-gray-100 border border-gray-600 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 transition duration-200">
            </div>
            <div>
                <label for="password" class="block text-sm font-medium text-gray-300">Senha</label>
                <div class="relative mt-1">
                    <input type="password" id="password" name="password" required autocomplete="current-password" class="block w-full px-4 py-2 bg-gray-700 text-gray-100 border border-gray-600 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 transition duration-200 pr-10">
                    <button type="button" id="toggle-password" class="absolute inset-y-0 right-0 px-3 flex items-center text-gray-400 hover:text-gray-100">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                            <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" />
                        </svg>
                    </button>
                </div>
            </div>
            <div id="confirm-password-container" class="hidden">
                <label for="confirm-password" class="block text-sm font-medium text-gray-300">Confirmar Senha</label>
                <div class="relative mt-1">
                    <input type="password" id="confirm-password-signup" name="confirm-password" class="block w-full px-4 py-2 bg-gray-700 text-gray-100 border border-gray-600 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 transition duration-200 pr-10" autocomplete="new-password">
                    <button type="button" id="toggle-confirm-password" class="absolute inset-y-0 right-0 px-3 flex items-center text-gray-400 hover:text-gray-100">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                            <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" />
                        </svg>
                    </button>
                </div>
            </div>
            <div>
                <button type="submit" id="submit-btn" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition duration-200">Entrar</button>
            </div>
        </form>

        <!-- Mensagens de Erro ou Sucesso -->
        <div id="message" class="mt-4 text-center text-sm font-medium" style="display: none;"></div>
        
        <!-- Alternador entre login e cadastro, e botão de recuperação de senha -->
        <div class="mt-6 text-center text-sm space-y-2">
            <button id="toggle-auth" class="text-blue-400 hover:text-blue-300 transition duration-200 focus:outline-none">Ainda não tem uma conta? Cadastre-se</button>
            <div id="forgot-password-container">
                <button id="forgot-password-btn" class="text-blue-400 hover:text-blue-300 transition duration-200 focus:outline-none block w-full">Esqueci minha senha</button>
            </div>
        </div>
    </div>

    <!-- Página de Recuperação de Senha -->
    <div id="password-recovery-container" class="hidden w-full max-w-sm bg-gray-800 p-8 rounded-xl shadow-lg transition-all duration-300">
        <div class="text-center mb-6">
            <h1 class="text-3xl font-bold text-gray-100">Atualizar Senha</h1>
        </div>
        <form id="password-recovery-form" class="space-y-4">
            <div>
                <label for="new-password" class="block text-sm font-medium text-gray-300">Nova Senha</label>
                <div class="relative mt-1">
                    <input type="password" id="new-password" name="new-password" required class="block w-full px-4 py-2 bg-gray-700 text-gray-100 border border-gray-600 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 transition duration-200 pr-10" autocomplete="new-password">
                    <button type="button" id="toggle-new-password" class="absolute inset-y-0 right-0 px-3 flex items-center text-gray-400 hover:text-gray-100">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                            <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" />
                        </svg>
                    </button>
                </div>
            </div>
            <div>
                <label for="confirm-password" class="block text-sm font-medium text-gray-300">Confirmar Nova Senha</label>
                <div class="relative mt-1">
                    <input type="password" id="confirm-password-recovery" name="confirm-password" required class="block w-full px-4 py-2 bg-gray-700 text-gray-100 border border-gray-600 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 transition duration-200 pr-10" autocomplete="new-password">
                    <button type="button" id="toggle-confirm-recovery" class="absolute inset-y-0 right-0 px-3 flex items-center text-gray-400 hover:text-gray-100">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                            <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" />
                        </svg>
                    </button>
                </div>
            </div>
            <div>
                <button type="submit" id="update-password-btn" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition duration-200">Atualizar Senha</button>
            </div>
        </form>
        <div id="password-recovery-message" class="mt-4 text-center text-sm font-medium" style="display: none;"></div>
    </div>

    <!-- Página de Itens Devolvidos (Histórico) -->
    <div id="historico-page" class="hidden w-full h-screen">
        <div class="flex justify-between items-center mb-6">
            <div class="fixed top-0 left-0 w-full bg-gray-800 p-4 shadow-lg z-50 flex flex-wrap justify-start items-center space-x-4 space-y-2 sm:space-y-0">
                <button id="back-to-liberacao" class="py-2 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-gray-500 hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 transition duration-200">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 15l-3-3m0 0l3-3m-3 3h8M3 12a9 9 0 1118 0 9 9 0 01-18 0z" />
                    </svg>
                </button>
                 
                <!-- Barra de pesquisa movida para a barra superior -->
                <div class="mt-2 sm:mt-0 w-full sm:w-auto flex-grow flex items-center relative">
                    <input type="text" id="historico-search-input" placeholder="Pesquisar..." class="w-full px-4 py-2 bg-gray-700 text-gray-100 border border-gray-600 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 transition duration-200">
                    <button id="historico-clear-search" class="absolute right-2 text-gray-400 hover:text-gray-200">
                       <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                         <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                       </svg>
                    </button>
                </div>
            </div>
        </div>
        
        <div class="fixed top-[7rem] left-12 right-12 bottom-12 bg-gray-800 rounded-xl shadow-lg p-8 overflow-y-auto">
            <div id="historico-list" class="space-y-4">
                <!-- Lista de itens devolvidos será renderizada aqui -->
            </div>
             <p class="text-center text-sm text-gray-500 mt-4">Itens registrados há mais de 3 meses são excluídos permanentemente do sistema.</p>
        </div>
    </div>

    <!-- Página de Achados e Perdidos -->
    <div id="liberacao-page" class="hidden w-full h-screen">
        <!-- Barra de navegação fixa no topo -->
        <div class="fixed top-0 left-0 w-full bg-gray-800 p-4 shadow-lg z-50 flex flex-wrap justify-start items-center space-x-4 space-y-2 sm:space-y-0">
            
             <button id="sign-out-liberacao" class="py-2 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition duration-200">Sair</button>
            
            <button id="btn-historico" class="py-2 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-gray-500 hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 transition duration-200">Histórico</button>
            
            <button id="btn-add-item" class="py-2 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-emerald-500 hover:bg-emerald-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-emerald-500 transition duration-200">Adicionar</button>
            
            <!-- Barra de pesquisa movida para a barra superior -->
            <div class="mt-2 sm:mt-0 w-full sm:w-auto flex-grow flex items-center relative">
                <input type="text" id="search-input" placeholder="Pesquisar..." class="w-full px-4 py-2 bg-gray-700 text-gray-100 border border-gray-600 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 transition duration-200">
                <button id="clear-search" class="absolute right-2 text-gray-400 hover:text-gray-200">
                   <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                     <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                   </svg>
                </button>
            </div>
        </div>
        
        <!-- Formulário de Adicionar/Editar Item -->
        <form id="add-item-form" class="fixed inset-0 hidden items-center justify-center z-[50] bg-black bg-opacity-50">
            <div class="w-full max-w-lg bg-gray-700 p-6 rounded-lg shadow-md mt-16 space-y-4 max-h-[80vh] overflow-y-auto">
                <h3 id="form-subtitle" class="text-lg font-bold text-gray-100">Adicionar Item</h3>
                
                <div>
                    <label for="descricao" class="block text-sm font-medium text-gray-300">Descrição do Objeto</label>
                    <textarea id="descricao" name="descricao" rows="3" required class="mt-1 block w-full px-4 py-2 bg-gray-600 text-gray-100 border border-gray-500 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 transition duration-200"></textarea>
                </div>
                
                <div>
                    <label for="local_encontrado" class="block text-sm font-medium text-gray-300">Local Onde Foi Encontrado</label>
                    <input type="text" id="local_encontrado" name="local_encontrado" required class="mt-1 block w-full px-4 py-2 bg-gray-600 text-gray-100 border border-gray-500 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 transition duration-200">
                </div>

                <div>
                    <label for="data_encontrado" class="block text-sm font-medium text-gray-300">Data em que foi Encontrado</label>
                    <input type="text" id="data_encontrado" name="data_encontrado" placeholder="DD/MM/AAAA" maxlength="10" class="mt-1 block w-full px-4 py-2 bg-gray-600 text-gray-100 border border-gray-500 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 transition duration-200">
                </div>
                
                 <div>
                    <label for="hora_encontrado" class="block text-sm font-medium text-gray-300">Hora em que foi Encontrado</label>
                    <input type="text" id="hora_encontrado" name="hora_encontrado" placeholder="HH:mm" maxlength="5" class="mt-1 block w-full px-4 py-2 bg-gray-600 text-gray-100 border border-gray-500 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 transition duration-200">
                </div>

                <div>
                    <label for="observacao" class="block text-sm font-medium text-gray-300">Observação</label>
                    <textarea id="observacao" name="observacao" rows="3" class="mt-1 block w-full px-4 py-2 bg-gray-600 text-gray-100 border border-gray-500 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 transition duration-200"></textarea>
                </div>
                
                <div>
                     <label for="foto" class="block text-sm font-medium text-gray-300">Anexar Foto</label>
                     <div class="flex items-center space-x-4 mt-1">
                         <button type="button" id="btn-camera" class="py-2 px-4 rounded-lg shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition duration-200">Câmera</button>
                         <input type="file" id="foto" name="foto" accept="image/*" class="custom-file-input block w-full text-gray-300">
                     </div>
                </div>

                <!-- Contêiner da miniatura da foto -->
                <div id="photo-thumbnail-container" class="mt-4 hidden">
                    <img id="photo-thumbnail" src="#" alt="Miniatura da foto" class="w-full h-auto object-cover rounded-lg border border-gray-600">
                </div>
                
                <div class="flex space-x-4">
                    <button type="submit" id="form-submit-btn" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition duration-200">Salvar Item</button>
                    <button type="button" id="form-cancel-btn" class="w-full flex justify-center py-2 px-4 border border-gray-500 rounded-lg shadow-sm text-sm font-medium text-gray-200 bg-gray-600 hover:bg-gray-500 transition duration-200">Cancelar</button>
                </div>
            </div>
        </form>
        
        <div class="fixed top-[7rem] left-12 right-12 bottom-12 bg-gray-800 rounded-xl shadow-lg p-8 overflow-y-auto">
            <div id="liberacoes-list" class="space-y-4">
                <!-- Lista de itens encontrados será renderizada aqui -->
            </div>
        </div>
    </div>

    <!-- Modal de Devolução (substitui o modal de confirmação) -->
    <div id="devolver-modal" class="modal">
        <div class="modal-content">
            <h3 class="text-lg font-bold text-gray-100 mb-4">Confirmar Devolução</h3>
            <p class="text-gray-300 mb-4">Por favor, insira o nome da pessoa que retirou o item.</p>
            <input type="text" id="quem-retirou-input" placeholder="Nome do responsável" class="mt-1 block w-full px-4 py-2 bg-gray-700 text-gray-100 border border-gray-600 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 transition duration-200" required>
            <div class="modal-buttons">
                <button id="confirm-devolver-btn" class="py-2 px-4 rounded-lg shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition duration-200">Confirmar</button>
                <button id="cancel-devolver-btn" class="py-2 px-4 rounded-lg shadow-sm text-sm font-medium text-gray-200 bg-gray-600 hover:bg-gray-500 transition duration-200">Cancelar</button>
            </div>
        </div>
    </div>

    <!-- Modal para Usar a Câmera -->
    <div id="camera-modal" class="modal">
        <div class="modal-content max-w-lg w-full">
            <h3 class="text-lg font-bold text-gray-100 mb-4">Tirar Foto</h3>
            <div class="flex flex-col items-center">
                <video id="video-stream" class="w-full max-w-sm rounded-lg mb-4" autoplay></video>
                <canvas id="camera-canvas" class="hidden"></canvas>
                <div class="flex space-x-4">
                    <button type="button" id="take-photo-btn" class="py-2 px-4 rounded-lg shadow-sm text-sm font-medium text-white bg-emerald-600 hover:bg-emerald-700">Tirar Foto</button>
                    <button type="button" id="cancel-camera-btn" class="py-2 px-4 rounded-lg shadow-sm text-sm font-medium text-gray-200 bg-gray-600 hover:bg-gray-500">Cancelar</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal de Mensagem de Erro -->
    <div id="message-modal" class="modal">
        <div class="modal-content relative">
            <button id="close-message-modal" class="absolute top-2 right-2 text-gray-400 hover:text-gray-100 transition duration-200">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
            <h3 class="text-lg font-bold text-gray-100 mb-4">Atenção!</h3>
            <p id="modal-message" class="text-gray-300"></p>
        </div>
    </div>

    <!-- Novo Modal para Imagem Expandida -->
    <div id="image-modal" class="modal">
        <div class="modal-content-lg">
            <button id="close-image-modal" class="absolute top-4 right-4 text-white bg-red-600 hover:bg-red-700 rounded-full w-10 h-10 flex items-center justify-center p-2 shadow-lg transition duration-200">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
            <img id="expanded-image" src="" alt="Imagem expandida" class="w-full h-auto object-contain rounded-lg max-h-[75vh]">
        </div>
    </div>


    <!-- Script do Supabase (substitua a versão se necessário) -->
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>

    <!-- JavaScript para a lógica do aplicativo -->
    <script type="module">
        // **IMPORTANTE**: Substitua 'VOTSUF_URL' e 'VOTSUF_ANON_KEY' pelas suas credenciais do projeto Supabase.
        const supabaseUrl = 'https://otiueonsldxjnyfiaxwi.supabase.co'
        const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im90aXVlb25zbGR4am55ZmlheHdpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc0MjY0OTIsImV4cCI6MjA3MzAwMjQ5Mn0.NV0KoizFYOzu8Pe47vYq1LR6Uy18iKobm06DVr5bt_k'
        
        // Inicializa o cliente Supabase
        const supabase = window.supabase.createClient(supabaseUrl, supabaseAnonKey);

        window.onload = function() {
            // Seleção de elementos do DOM
            const accessControlTitle = document.getElementById('access-control-title');
            const authContainer = document.getElementById('auth-container');
            const passwordRecoveryContainer = document.getElementById('password-recovery-container');
            const passwordRecoveryForm = document.getElementById('password-recovery-form');
            const newPasswordInput = document.getElementById('new-password');
            const confirmPasswordInput = document.getElementById('confirm-password-recovery');
            const historicoPage = document.getElementById('historico-page');
            const historicoList = document.getElementById('historico-list');
            const authForm = document.getElementById('auth-form');
            const formTitle = document.getElementById('form-title');
            const submitBtn = document.getElementById('submit-btn');
            const toggleAuthBtn = document.getElementById('toggle-auth');
            const messageElem = document.getElementById('message');
            const forgotPasswordBtn = document.getElementById('forgot-password-btn');
            const forgotPasswordContainer = document.getElementById('forgot-password-container');
            const liberacaoPage = document.getElementById('liberacao-page');
            const btnHistorico = document.getElementById('btn-historico');
            const btnAddItem = document.getElementById('btn-add-item');
            const itensList = document.getElementById('liberacoes-list');
            const formSubtitle = document.getElementById('form-subtitle');
            const formSubmitBtn = document.getElementById('form-submit-btn');
            const formCancelBtn = document.getElementById('form-cancel-btn');
            const localEncontradoInput = document.getElementById('local_encontrado');
            const dataEncontradoInput = document.getElementById('data_encontrado');
            const horaEncontradoInput = document.getElementById('hora_encontrado');
            const descricaoInput = document.getElementById('descricao');
            const observacaoInput = document.getElementById('observacao');
            const fotoInput = document.getElementById('foto');
            const addItemForm = document.getElementById('add-item-form');
            
            // Novos elementos para os ícones de olho
            const togglePasswordBtn = document.getElementById('toggle-password');
            const toggleConfirmPasswordBtn = document.getElementById('toggle-confirm-password');
            const toggleNewPasswordBtn = document.getElementById('toggle-new-password');
            const toggleConfirmRecoveryBtn = document.getElementById('toggle-confirm-recovery');
            
            // Campos de senha
            const passwordInput = document.getElementById('password');
            const confirmPasswordSignupInput = document.getElementById('confirm-password-signup');

            // Modal elements
            const devolverModal = document.getElementById('devolver-modal');
            const quemRetirouInput = document.getElementById('quem-retirou-input');
            const confirmDevolverBtn = document.getElementById('confirm-devolver-btn');
            const cancelDevolverBtn = document.getElementById('cancel-devolver-btn');
            const messageModal = document.getElementById('message-modal');
            const modalMessage = document.getElementById('modal-message');
            const closeMessageModalBtn = document.getElementById('close-message-modal');

            // Novos elementos para a câmera
            const cameraModal = document.getElementById('camera-modal');
            const videoElement = document.getElementById('video-stream');
            const cameraCanvas = document.getElementById('camera-canvas');
            const takePhotoBtn = document.getElementById('take-photo-btn');
            const cancelCameraBtn = document.getElementById('cancel-camera-btn');
            const btnCamera = document.getElementById('btn-camera');

            // Novos elementos de filtro
            const btnFilterAll = document.getElementById('btn-filter-all');
            const filterDateInput = document.getElementById('filter-date');
            const searchInput = document.getElementById('search-input');
            const clearSearchBtn = document.getElementById('clear-search');
            
            // Novos elementos de filtro para histórico
            const historicoBtnFilterAll = document.getElementById('historico-btn-filter-all');
            const historicoFilterDateInput = document.getElementById('historico-filter-date');
            const historicoSearchInput = document.getElementById('historico-search-input');
            const historicoClearSearchBtn = document.getElementById('historico-search-input');
            
            // Botão de sair da barra de navegação
            const signOutLiberacaoBtn = document.getElementById('sign-out-liberacao');
            
            // Botão para voltar da página de histórico para a de liberação
            const backToLiberacaoBtn = document.getElementById('back-to-liberacao');

            // Elementos do novo modal de imagem
            const imageModal = document.getElementById('image-modal');
            const expandedImage = document.getElementById('expanded-image');
            const closeImageModalBtn = document.getElementById('close-image-modal');

            // Novos elementos da miniatura da foto
            const photoThumbnailContainer = document.getElementById('photo-thumbnail-container');
            const photoThumbnail = document.getElementById('photo-thumbnail');

            let isSigningUp = false;
            let currentSession = null;
            let itemToDeleteId = null;
            let itemToEdit = null;
            let currentFilterType = 'all';
            let currentFilterDate = null;
            const HISTORY_LIMIT = 50;
            let searchTimeout;
            let historicoSearchTimeout;
            const PURGE_TIME_IN_MONTHS = 3;

            // Variável para armazenar a foto da câmera
            let capturedImageFile = null;

            // Função para exibir a miniatura da foto
            function displayPhotoThumbnail(file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    photoThumbnail.src = e.target.result;
                    photoThumbnailContainer.classList.remove('hidden');
                };
                reader.readAsDataURL(file);
            }

            // Função para limpar a miniatura da foto
            function clearPhotoThumbnail() {
                photoThumbnail.src = '#';
                photoThumbnailContainer.classList.add('hidden');
            }

            // Lógica para alternar entre o formulário de login e cadastro
            toggleAuthBtn.addEventListener('click', () => {
                isSigningUp = !isSigningUp;
                if (isSigningUp) {
                    formTitle.textContent = 'Crie uma Conta';
                    submitBtn.textContent = 'Cadastrar';
                    toggleAuthBtn.textContent = 'Já tem uma conta? Faça login';
                    forgotPasswordContainer.style.display = 'none';
                    document.getElementById('confirm-password-container').classList.remove('hidden');
                } else {
                    formTitle.textContent = 'Faça Login';
                    submitBtn.textContent = 'Entrar';
                    toggleAuthBtn.textContent = 'Ainda não tem uma conta? Cadastre-se';
                    forgotPasswordContainer.style.display = 'block';
                    document.getElementById('confirm-password-container').classList.add('hidden');
                }
                showMessage(''); // Limpa a mensagem ao alternar
            });

            // Função para exibir mensagens na tela
            function showMessage(text, isError = false) {
                messageElem.textContent = text;
                messageElem.style.display = text ? 'block' : 'none';
                messageElem.className = `mt-4 text-center text-sm font-medium ${isError ? 'text-red-500' : 'text-green-500'}`;
            }
            
            // Função para exibir mensagens de validação
            function showValidationMessage(text) {
                modalMessage.textContent = text || 'Por favor, preencha todos os campos obrigatórios.';
                messageModal.style.display = 'flex';
            }

            closeMessageModalBtn.addEventListener('click', () => {
                messageModal.style.display = 'none';
            });

            // Lógica para lidar com o envio do formulário de autenticação
            authForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                const email = document.getElementById('email').value;
                const password = passwordInput.value;
                
                if (isSigningUp) {
                    const confirmPassword = confirmPasswordSignupInput.value;
                    if (password !== confirmPassword) {
                        showMessage('As senhas não coincidem. Tente novamente.', true);
                        return;
                    }
                    
                    // Lógica de cadastro
                    const { data, error } = await supabase.auth.signUp({ email, password, options: { emailRedirectTo: window.location.href } });
                    if (error) {
                        showMessage(error.message, true);
                    } else {
                        showMessage('Confirme seu email. Verifique sua caixa de entrada.');
                        console.log('Dados do usuário:', data);
                    }
                } else {
                    // Lógica de login
                    const { data, error } = await supabase.auth.signInWithPassword({ email, password });
                    if (error) {
                        showMessage(error.message, true);
                    } else {
                        showMessage('Login bem-sucedido!');
                        console.log('Dados do usuário:', data);
                    }
                }
            });
            
            // Lógica de redefinição de senha
            forgotPasswordBtn.addEventListener('click', async () => {
                const email = document.getElementById('email').value;
                if (!email) {
                    showMessage('Por favor, insira seu email para recuperar a senha.', true);
                    return;
                }

                const { data, error } = await supabase.auth.resetPasswordForEmail(email, { redirectTo: window.location.href });
                if (error) {
                        showMessage(error.message, true);
                } else {
                    showMessage('Verifique seu e-mail para o link de redefinição de senha.');
                }
            });
            
            // Lógica para lidar com o formulário de recuperação de senha
            passwordRecoveryForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                const newPassword = newPasswordInput.value;
                const confirmPassword = confirmPasswordInput.value;

                if (newPassword !== confirmPassword) {
                    modalMessage.textContent = 'As senhas não coincidem. Tente novamente.';
                    messageModal.style.display = 'flex';
                    return;
                }

                const { data, error } = await supabase.auth.updateUser({
                    password: newPassword
                });

                if (error) {
                    modalMessage.textContent = error.message;
                    messageModal.style.display = 'flex';
                } else {
                    modalMessage.textContent = 'Senha atualizada com sucesso! Você já pode entrar.';
                    messageModal.style.display = 'flex';
                    setTimeout(() => {
                        window.location.hash = ''; // Limpa o hash da URL
                        window.location.reload(); // Recarrega a página para o estado inicial
                    }, 2000);
                }
            });

            // Lógica para alternar a visibilidade da senha
            function setupPasswordToggle(inputElem, buttonElem) {
                buttonElem.addEventListener('click', () => {
                    const type = inputElem.type === 'password' ? 'text' : 'password';
                    inputElem.type = type;
                    
                    // Altera o ícone do olho
                    if (type === 'password') {
                        buttonElem.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                            <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" />
                            </svg>`;
                    } else {
                        buttonElem.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M3.707 2.293a1 1 0 00-1.414 1.414l14 14a1 1 0 001.414-1.414l-14-14z" clip-rule="evenodd" />
                            <path d="M10 4.5C6.703 4.5 3.868 6.643 2.54 9.516l-.078.184.078.184C3.868 13.357 6.703 15.5 10 15.5c3.297 0 6.132-2.143 7.46-4.984l.078-.184-.078-.184C16.132 6.643 13.297 4.5 10 4.5zM10 8a2 2 0 100 4 2 2 0 000-4z" />
                        </svg>`;
                    }
                });
            }
            setupPasswordToggle(passwordInput, togglePasswordBtn);
            setupPasswordToggle(confirmPasswordSignupInput, toggleConfirmPasswordBtn);
            setupPasswordToggle(newPasswordInput, toggleNewPasswordBtn);
            setupPasswordToggle(confirmPasswordInput, toggleConfirmRecoveryBtn);


            // Lógica para alternar para a página de Histórico de Itens Devolvidos
            btnHistorico.addEventListener('click', () => {
                liberacaoPage.style.display = 'none';
                historicoPage.style.display = 'flex';
                fetchHistorico(currentSession);
            });


            // Lógica para voltar da página de histórico para a página de achados
            backToLiberacaoBtn.addEventListener('click', () => {
                 historicoPage.style.display = 'none';
                 liberacaoPage.style.display = 'flex';
            });

            //Lógica para deslogar
            signOutLiberacaoBtn.addEventListener('click', async () => {
                const { error } = await supabase.auth.signOut();
                if (error) {
                    showMessage('Erro ao sair.', true);
                }
                window.location.reload();
            });

            // Lógica para mostrar/esconder o formulário de adicionar item
            btnAddItem.addEventListener('click', () => {
                addItemForm.style.display = 'flex';
                formSubtitle.textContent = 'Adicionar Item';
                formSubmitBtn.textContent = 'Salvar Item';
                addItemForm.reset();
                itemToEdit = null;
                capturedImageFile = null;
                clearPhotoThumbnail();
                // Preenche o campo de data e hora com o valor atual
                dataEncontradoInput.value = moment().format('DD/MM/YYYY');
                horaEncontradoInput.value = moment().format('HH:mm');
            });

            // Lógica para cancelar a edição
            formCancelBtn.addEventListener('click', () => {
                addItemForm.style.display = 'none';
                addItemForm.reset();
                itemToEdit = null;
                capturedImageFile = null;
                clearPhotoThumbnail();
            });

            // Listener para o input de arquivo
            fotoInput.addEventListener('change', () => {
                if (fotoInput.files.length > 0) {
                    displayPhotoThumbnail(fotoInput.files[0]);
                    capturedImageFile = null; // Garante que a foto da câmera seja descartada se um arquivo for carregado
                } else {
                    clearPhotoThumbnail();
                }
            });


            // Lógica para lidar com o envio do formulário de item
            addItemForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                
                const localEncontrado = localEncontradoInput.value;
                const dataEncontrado = dataEncontradoInput.value;
                const horaEncontrado = horaEncontradoInput.value;
                const descricao = descricaoInput.value;
                const observacao = observacaoInput.value;
                let file = fotoInput.files[0];

                // Se uma foto foi capturada pela câmera, use-a
                if (capturedImageFile) {
                    file = capturedImageFile;
                }
                
                if (!localEncontrado || !dataEncontrado || !horaEncontrado || !descricao) {
                     showValidationMessage('Por favor, preencha o local, a data, o horário e a descrição do item.');
                     return;
                }

                // Nova validação para tornar a foto obrigatória
                if (!file && !capturedImageFile) {
                     showValidationMessage('É obrigatório carregar ou tirar uma foto do item.');
                     return;
                }

                // Validação de formato de data e hora
                const combinedDateTime = `${dataEncontrado} ${horaEncontrado}`;
                const parsedDate = moment(combinedDateTime, 'DD/MM/YYYY HH:mm', true);
                if (!parsedDate.isValid()) {
                    showValidationMessage('O formato da data ou hora está incorreto.');
                    return;
                }

                // Validação para não permitir datas futuras
                if (parsedDate.isAfter(moment())) {
                     showValidationMessage('A data e hora de encontro do item não podem estar no futuro.');
                     return;
                }
                
                let filePath = null;

                if (file) {
                     const fileName = `${Date.now()}-${file.name}`;
                     filePath = `${currentSession.user.id}/${fileName}`;

                     try {
                         const { error: uploadError } = await supabase
                             .storage
                             .from('achados_fotos')
                             .upload(filePath, file);

                         if (uploadError) {
                             console.error('Erro ao fazer upload da foto:', uploadError);
                             showValidationMessage(`Erro ao fazer upload da foto: ${uploadError.message}`);
                             return;
                         }
                     } catch (e) {
                         console.error('Erro de armazenamento:', e);
                         showValidationMessage('Erro de armazenamento. Verifique se o bucket "achados_fotos" existe.');
                         return;
                     }
                }

                const payload = { 
                    descricao: descricao,
                    local_encontrado: localEncontrado,
                    data_encontrado: parsedDate.toISOString(),
                    criador_nome: currentSession.user.email,
                    anexo_url: filePath ? supabase.storage.from('achados_fotos').getPublicUrl(filePath).data.publicUrl : null,
                    observacao: observacao
                };

                if (itemToEdit) {
                    if (formSubmitBtn.textContent === 'Marcar como Devolvido') {
                        payload.devolvido = true;
                        payload.data_devolucao = new Date().toISOString();
                        payload.devolvido_por = currentSession.user.email;
                    }

                    const { data, error } = await supabase
                        .from('achados')
                        .update(payload)
                        .eq('id', itemToEdit.id);

                    if (error) {
                        console.error('Erro ao editar o item:', error);
                        showValidationMessage('Erro ao editar o item. Por favor, verifique a base de dados.');
                    } else {
                        showMessage('Item editado com sucesso!');
                        itemToEdit = null;
                        addItemForm.style.display = 'none';
                        addItemForm.reset();
                        capturedImageFile = null;
                        clearPhotoThumbnail();
                        if (historicoPage.style.display !== 'none') {
                            fetchHistorico(currentSession);
                        } else {
                            fetchAchados(currentSession);
                        }
                    }

                } else {
                    // Ao inserir um novo item, a política de segurança deve permitir a operação.
                    const { data, error } = await supabase
                        .from('achados')
                        .insert([payload]);

                    if (error) {
                        console.error('Erro ao salvar o item:', error);
                        // Adicionando uma mensagem de erro específica para o RLS.
                        if (error.message.includes('row-level security policy')) {
                             showValidationMessage('Erro ao salvar o item: a política de segurança da tabela pode estar a bloquear esta ação. Verifique as configurações de RLS no Supabase.');
                        } else {
                             showValidationMessage('Erro ao salvar o item. Por favor, verifique a tabela na base de dados.');
                        }
                    } else {
                        showMessage('Item adicionado com sucesso!');
                        addItemForm.reset();
                        addItemForm.style.display = 'none';
                        capturedImageFile = null;
                        clearPhotoThumbnail();
                        fetchAchados(currentSession);
                    }
                }
            });
            
            async function editItem(id) {
                const { data, error } = await supabase
                    .from('achados')
                    .select('*')
                    .eq('id', id)
                    .single();

                if (error) {
                    console.error('Erro ao buscar o item para edição:', error);
                    return;
                }

                itemToEdit = data;
                
                descricaoInput.value = itemToEdit.descricao || '';
                localEncontradoInput.value = itemToEdit.local_encontrado || '';
                dataEncontradoInput.value = itemToEdit.data_encontrado ? moment(itemToEdit.data_encontrado).format('DD/MM/YYYY') : '';
                horaEncontradoInput.value = itemToEdit.data_encontrado ? moment(itemToedit.data_encontrado).format('HH:mm') : '';
                observacaoInput.value = itemToEdit.observacao || '';

                formSubtitle.textContent = 'Editar Item';
                formSubmitBtn.textContent = 'Salvar Edição';
                addItemForm.style.display = 'flex';
                
                if (itemToEdit.anexo_url) {
                    photoThumbnail.src = itemToEdit.anexo_url;
                    photoThumbnailContainer.classList.remove('hidden');
                } else {
                    clearPhotoThumbnail();
                }
            }


            function devolverItem(id) {
                itemToDeleteId = id;
                devolverModal.style.display = 'flex';
            }
            
            async function deleteItem(id) {
                const { error } = await supabase
                    .from('achados')
                    .update({ 
                        devolvido: true, 
                        motivo_devolucao: `Deletado permanentemente por: ${currentSession.user.email}`,
                        data_devolucao: new Date().toISOString()
                    })
                    .eq('id', id);
                
                if (error) {
                    console.error('Erro ao deletar o item:', error);
                    showMessage('Erro ao deletar o item.', true);
                } else {
                    showMessage('Item deletado com sucesso!');
                    fetchAchados(currentSession);
                    checkAndPurgeHistory();
                }
            }


            // Lógica para o modal de devolução
            confirmDevolverBtn.addEventListener('click', async () => {
                const quemRetirou = quemRetirouInput.value;
                if (!quemRetirou) {
                    showValidationMessage('Por favor, insira o nome da pessoa que retirou o item.');
                    return;
                }

                devolverModal.style.display = 'none';
                if (!itemToDeleteId) return;

                const { error } = await supabase
                    .from('achados')
                    .update({ 
                        devolvido: true, 
                        devolvido_por: currentSession.user.email,
                        quem_retirou: quemRetirou,
                        data_devolucao: new Date().toISOString()
                    })
                    .eq('id', itemToDeleteId);
                
                if (error) {
                    console.error('Erro ao devolver o item:', error);
                    showMessage('Erro ao devolver o item.', true);
                } else {
                    showMessage('Item devolvido com sucesso!');
                    fetchAchados(currentSession);
                    checkAndPurgeHistory();
                }

                itemToDeleteId = null;
            });

            cancelDevolverBtn.addEventListener('click', () => {
                devolverModal.style.display = 'none';
                itemToDeleteId = null;
            });

            // Função para expandir a imagem
            function expandImage(imageUrl) {
                expandedImage.src = imageUrl;
                imageModal.style.display = 'flex';
            }

            // Fechar o modal de imagem
            closeImageModalBtn.addEventListener('click', () => {
                imageModal.style.display = 'none';
            });

            // Função para verificar e purgar itens antigos do histórico
            async function checkAndPurgeHistory() {
                const threeMonthsAgo = moment().subtract(PURGE_TIME_IN_MONTHS, 'months');
                const { data, error } = await supabase
                    .from('achados')
                    .select('id, data_devolucao')
                    .eq('devolvido', true);

                if (error) {
                    console.error('Erro ao verificar o histórico:', error);
                    return;
                }

                if (data && data.length > 0) {
                    const oldItems = data.filter(item => moment(item.data_devolucao).isBefore(threeMonthsAgo));
                    
                    if (oldItems.length > 0) {
                        const itemIdsToPurge = oldItems.map(item => item.id);
                        
                        const { error: updateError } = await supabase
                            .from('achados')
                            .update({ motivo_devolucao: 'Deletado automaticamente pelo sistema.' })
                            .in('id', itemIdsToPurge);

                        if (updateError) {
                            console.error('Erro ao atualizar motivo de purga:', updateError);
                        } else {
                            const { error: deleteError } = await supabase
                                .from('achados')
                                .delete()
                                .in('id', itemIdsToPurge);

                            if (deleteError) {
                                console.error('Erro ao excluir permanentemente os itens:', deleteError);
                            } else {
                                console.log(`Itens mais antigos que ${PURGE_TIME_IN_MONTHS} meses foram excluídos permanentemente.`);
                            }
                        }
                    }
                }
            }
            
            async function fetchHistorico(session, searchTerm = null) {
                
                let query = supabase
                    .from('achados')
                    .select('*')
                    .eq('devolvido', true)
                    .order('data_encontrado', { ascending: false });

                const { data, error } = await query;

                if (error) {
                    console.error('Erro ao buscar histórico:', error);
                    historicoList.innerHTML = `<p class="text-center text-red-500">Erro ao carregar o histórico.</p>`;
                    return;
                }
                
                let filteredData = data;
                if (searchTerm && searchTerm.trim() !== '') {
                    const normalizedSearchTerm = normalizeText(searchTerm);
                    filteredData = data.filter(item => {
                        const textToSearch = `${item.descricao} ${item.local_encontrado} ${item.criador_nome} ${item.quem_retirou} ${item.motivo_devolucao}`;
                        return normalizeText(textToSearch).includes(normalizedSearchTerm);
                    });
                }


                historicoList.innerHTML = '';
                if (filteredData && filteredData.length > 0) {
                    filteredData.forEach(item => {
                        const cardClasses = 'bg-gray-700 p-4 rounded-lg shadow-lg transition-all duration-300 hover:bg-gray-600 flex flex-col sm:flex-row items-center border border-gray-600';
                        const itemCard = document.createElement('div');
                        itemCard.className = cardClasses;

                        const dataDevolucaoFormatada = moment(item.data_devolucao).format('DD/MM/YYYY HH:mm');
                        const dataEncontradoFormatada = item.data_encontrado ? moment(item.data_encontrado).format('DD/MM/YYYY HH:mm') : 'N/A';

                        // Cria o elemento da foto se a URL existir
                        let fotoElement = null;
                        if (item.anexo_url) {
                          fotoElement = document.createElement('img');
                          fotoElement.src = item.anexo_url;
                          fotoElement.className = 'rounded-lg mb-4 sm:mb-0 sm:mr-4 w-full sm:w-48 h-48 object-cover cursor-pointer hover:opacity-80 transition-opacity';
                          fotoElement.alt = 'Foto do item';
                          fotoElement.onclick = () => expandImage(item.anexo_url);
                        } else {
                           // Container para "SEM FOTO"
                           const noFotoContainer = document.createElement('div');
                           noFotoContainer.className = 'rounded-lg mb-4 sm:mb-0 sm:mr-4 w-full sm:w-48 h-48 bg-gray-500 flex items-center justify-center text-center text-gray-200 font-bold';
                           noFotoContainer.textContent = "SEM FOTO";
                           fotoElement = noFotoContainer;
                        }

                        // Cria o contêiner de detalhes
                        const detailsContainer = document.createElement('div');
                        detailsContainer.className = 'flex-grow';
                        let statusText = '';
                        if (item.quem_retirou) {
                            statusText = `Devolvido para ${item.quem_retirou} por: ${item.devolvido_por}`;
                        } else if (item.motivo_devolucao) {
                            statusText = `${item.motivo_devolucao}`;
                        } else {
                             statusText = `Data de devolução: ${dataDevolucaoFormatada}`;
                        }

                        detailsContainer.innerHTML = `
                            <p class="text-sm text-gray-400">Encontrado em: <strong class="text-lg text-gray-100">${dataEncontradoFormatada}</strong></p>
                            <p class="text-sm text-gray-400">Descrição: <strong class="text-lg text-gray-100">${item.descricao}</strong></p>
                            <p class="text-sm text-gray-400">Local Encontrado: <strong class="text-lg text-gray-100">${item.local_encontrado || 'N/A'}</strong></p>
                            <p class="text-sm text-gray-400 mt-2">Adicionado ao sistema por: <strong class="text-lg text-gray-100">${item.criador_nome}</strong></p>
                            <p class="text-sm text-gray-400">Data de adição no sistema: ${moment(item.created_at).format('DD/MM/YYYY HH:mm')}</p>
                            <p class="text-sm text-gray-400">Observação: <strong class="text-lg text-gray-100">${item.observacao || 'N/A'}</strong></p>
                            <p class="text-sm text-red-400 mt-2">${statusText}</p>
                        `;
                        
                        if (fotoElement) {
                           itemCard.appendChild(fotoElement);
                        }
                        itemCard.appendChild(detailsContainer);

                        historicoList.appendChild(itemCard);
                    });
                } else {
                    historicoList.innerHTML = `<p class="text-center text-gray-500">Nenhum item no histórico.</p>`;
                }
            }
            
            async function fetchAchados(session, searchTerm = null) {
                
                let query = supabase
                    .from('achados')
                    .select('*')
                    .eq('devolvido', false)
                    .order('data_encontrado', { ascending: false });

                const { data, error } = await query;

                if (error) {
                    console.error('Erro ao buscar itens encontrados:', error);
                    return;
                }

                let filteredData = data;
                if (searchTerm && searchTerm.trim() !== '') {
                    const normalizedSearchTerm = normalizeText(searchTerm);
                    filteredData = data.filter(item => {
                        const textToSearch = `${item.descricao} ${item.local_encontrado} ${item.criador_nome} ${item.observacao}`;
                        return normalizeText(textToSearch).includes(normalizedSearchTerm);
                    });
                }

                itensList.innerHTML = ''; // Limpa a lista antes de renderizar
                if (filteredData && filteredData.length > 0) {
                    filteredData.forEach(item => {
                        const cardClasses = 'bg-gray-700 p-4 rounded-lg shadow-lg transition-all duration-300 hover:bg-gray-600 flex flex-col sm:flex-row items-center border border-gray-600';
                        
                        const itemCard = document.createElement('div');
                        itemCard.className = cardClasses;
                        
                        const actionsContainer = document.createElement('div');
                        actionsContainer.className = 'flex items-center space-x-2 mt-4 sm:mt-0 sm:ml-auto';
                        
                        const devolverButton = document.createElement('button');
                        devolverButton.className = 'py-2 px-4 rounded-lg shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition duration-200';
                        devolverButton.textContent = 'Devolução';
                        devolverButton.onclick = () => devolverItem(item.id);

                        const deleteButton = document.createElement('button');
                        deleteButton.className = 'py-2 px-4 rounded-lg shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition duration-200';
                        deleteButton.textContent = 'Deletar';
                        deleteButton.onclick = () => deleteItem(item.id);

                        actionsContainer.appendChild(devolverButton);
                        actionsContainer.appendChild(deleteButton);
                        
                        const dataCriacaoFormatada = moment(item.created_at).format('DD/MM/YYYY HH:mm');
                        const dataEncontradoFormatada = item.data_encontrado ? moment(item.data_encontrado).format('DD/MM/YYYY HH:mm') : 'N/A';

                        // Cria o elemento da foto se a URL existir
                        let fotoElement = null;
                        if (item.anexo_url) {
                            fotoElement = document.createElement('img');
                            fotoElement.src = item.anexo_url;
                            fotoElement.className = 'rounded-lg mb-4 sm:mb-0 sm:mr-4 w-full sm:w-48 h-48 object-cover cursor-pointer hover:opacity-80 transition-opacity';
                            fotoElement.alt = 'Foto do item';
                            fotoElement.onclick = () => expandImage(item.anexo_url);
                        } else {
                           // Container para "SEM FOTO"
                           const noFotoContainer = document.createElement('div');
                           noFotoContainer.className = 'rounded-lg mb-4 sm:mb-0 sm:mr-4 w-full sm:w-48 h-48 bg-gray-500 flex items-center justify-center text-center text-gray-200 font-bold';
                           noFotoContainer.textContent = "SEM FOTO";
                           fotoElement = noFotoContainer;
                        }

                        const detailsContainer = document.createElement('div');
                        detailsContainer.className = 'flex-grow';
                        detailsContainer.innerHTML = `
                            <p class="text-sm text-gray-400">Encontrado em: <strong class="text-lg text-gray-100">${dataEncontradoFormatada}</strong></p>
                            <p class="text-sm text-gray-400">Descrição: <strong class="text-lg text-gray-100">${item.descricao}</strong></p>
                            <p class="text-sm text-gray-400">Local Encontrado: <strong class="text-lg text-gray-100">${item.local_encontrado || 'N/A'}</strong></p>
                            <p class="text-sm text-gray-400">Observação: <strong class="text-lg text-gray-100">${item.observacao || 'N/A'}</strong></p>
                            <p class="text-sm text-gray-400 mt-2">Adicionado ao sistema por: <strong class="text-lg text-gray-100">${item.criador_nome}</strong></p>
                            <p class="text-sm text-gray-400">Data de adição no sistema: ${dataCriacaoFormatada}</p>
                        `;
                        
                        if (fotoElement) {
                          itemCard.appendChild(fotoElement);
                        }
                        itemCard.appendChild(detailsContainer);
                        itemCard.appendChild(actionsContainer);

                        itensList.appendChild(itemCard);
                    });
                } else {
                    itensList.innerHTML = `<p class="text-center text-gray-500">Nenhum item encontrado.</p>`;
                }
            }

            // Função para normalizar strings, removendo acentos e convertendo para minúsculas
            function normalizeText(text) {
                return text.normalize("NFD").replace(/[\u0300-\u036f]/g, "").toLowerCase();
            }

            clearSearchBtn.addEventListener('click', () => {
                searchInput.value = '';
                if (currentSession) {
                    fetchAchados(currentSession, '');
                }
            });
            
            searchInput.addEventListener('input', (event) => {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => {
                    if (currentSession) {
                        fetchAchados(currentSession, event.target.value);
                    }
                }, 500);
            });
            
            historicoClearSearchBtn.addEventListener('click', () => {
                historicoSearchInput.value = '';
                if (currentSession) {
                    fetchHistorico(currentSession, '');
                }
            });

            historicoSearchInput.addEventListener('input', (event) => {
                clearTimeout(historicoSearchTimeout);
                historicoSearchTimeout = setTimeout(() => {
                    if (currentSession) {
                        fetchHistorico(currentSession, event.target.value);
                    }
                }, 500);
            });

            const handleAuthCallback = async () => {
                const hash = window.location.hash;
                if (hash.includes('access_token')) {
                    const params = new URLSearchParams(hash.substring(1));
                    const accessToken = params.get('access_token');
                    const refreshToken = params.get('refresh_token');
                    const type = params.get('type');

                    if (type === 'recovery') {
                        authContainer.style.display = 'none';
                        passwordRecoveryContainer.style.display = 'flex';
                        accessControlTitle.style.opacity = '0';
                        accessControlTitle.style.pointerEvents = 'none';
                    }

                    if (accessToken && refreshToken) {
                        try {
                            const { data, error } = await supabase.auth.setSession({
                                access_token: accessToken,
                                refresh_token: refreshToken,
                            });
                            if (error) {
                                console.error('Erro ao definir a sessão:', error);
                            } else {
                                console.log('Sessão definida com sucesso:', data);
                            }
                        } catch (err) {
                            console.error('Erro ao processar tokens da URL:', err);
                        } finally {
                            window.history.replaceState({}, document.title, window.location.pathname);
                        }
                    }
                }
            };

            handleAuthCallback();

            supabase.auth.onAuthStateChange(async (event, session) => {
                console.log('Evento de autenticação:', event);
                currentSession = session;

                if (event === 'SIGNED_OUT') {
                    authContainer.style.display = 'block';
                    liberacaoPage.style.display = 'none';
                    historicoPage.style.display = 'none';
                    accessControlTitle.style.opacity = '1';
                    accessControlTitle.style.pointerEvents = 'auto';
                    window.location.reload();
                } else if (session) {
                    if (passwordRecoveryContainer.style.display === 'flex') {
                        return;
                    }
                    
                    authContainer.style.display = 'none';
                    liberacaoPage.style.display = 'flex';
                    historicoPage.style.display = 'none';

                    accessControlTitle.style.opacity = '0';
                    accessControlTitle.style.pointerEvents = 'none';

                    fetchAchados(currentSession);
                    checkAndPurgeHistory();
                    
                } else {
                    authContainer.style.display = 'block';
                    liberacaoPage.style.display = 'none';
                    historicoPage.style.display = 'none';
                    accessControlTitle.style.opacity = '1';
                    accessControlTitle.style.pointerEvents = 'auto';
                }
                showMessage('');
            });
            
            document.getElementById('back-to-liberacao').addEventListener('click', async () => {
                 historicoPage.style.display = 'none';
                 liberacaoPage.style.display = 'flex';
            });

            signOutLiberacaoBtn.addEventListener('click', async () => {
                const { error } = await supabase.auth.signOut();
                if (error) {
                    showMessage('Erro ao sair.', true);
                }
            });

            // --- Lógica da Câmera ---
            let videoStream = null;

            btnCamera.addEventListener('click', async () => {
                cameraModal.style.display = 'flex';
                try {
                    videoStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: false });
                    videoElement.srcObject = videoStream;
                } catch (err) {
                    console.error("Erro ao acessar a câmera: ", err);
                    showValidationMessage('Erro ao acessar a câmera. Verifique as permissões do seu navegador.');
                    cameraModal.style.display = 'none';
                }
            });

            takePhotoBtn.addEventListener('click', () => {
                const context = cameraCanvas.getContext('2d');
                cameraCanvas.width = videoElement.videoWidth;
                cameraCanvas.height = videoElement.videoHeight;
                context.drawImage(videoElement, 0, 0, cameraCanvas.width, cameraCanvas.height);
                
                // Converte o canvas para um Blob e cria um "Arquivo" virtual
                cameraCanvas.toBlob(blob => {
                    capturedImageFile = new File([blob], `camera_photo_${Date.now()}.png`, { type: 'image/png' });
                    displayPhotoThumbnail(capturedImageFile); // Exibe a miniatura
                    showValidationMessage('Foto capturada com sucesso! A imagem será anexada ao item.');
                    // Para o stream da câmera
                    if (videoStream) {
                        videoStream.getTracks().forEach(track => track.stop());
                    }
                    cameraModal.style.display = 'none';
                }, 'image/png');
            });

            cancelCameraBtn.addEventListener('click', () => {
                if (videoStream) {
                    videoStream.getTracks().forEach(track => track.stop());
                }
                cameraModal.style.display = 'none';
            });

            // Lógica de formatação de entrada para data e hora
            function formatInput(input) {
                const oldValue = input.value;
                let start = input.selectionStart;
                let end = input.selectionEnd;

                let value = oldValue.replace(/\D/g, '');
                let newValue = '';

                if (input.id === 'data_encontrado') {
                    if (value.length > 2) {
                        newValue += value.substring(0, 2) + '/';
                        if (value.length > 4) {
                            newValue += value.substring(2, 4) + '/';
                            newValue += value.substring(4, 8);
                        } else {
                            newValue += value.substring(2);
                        }
                    } else {
                        newValue = value;
                    }
                    if (newValue.length > 10) {
                        newValue = newValue.substring(0, 10);
                    }

                    input.value = newValue;
                    
                    // Ajusta a posição do cursor
                    let newPos = start;
                    if (oldValue.length < newValue.length) {
                        if (start === 2 || start === 5) newPos++;
                    }
                    if (oldValue.length > newValue.length) {
                        if (oldValue.charAt(start-1) === '/' && start > 1) newPos--;
                    }
                    input.setSelectionRange(newPos, newPos);

                } else if (input.id === 'hora_encontrado') {
                    if (value.length > 2) {
                        newValue = value.substring(0, 2) + ':' + value.substring(2, 4);
                    } else {
                        newValue = value;
                    }
                    if (newValue.length > 5) {
                        newValue = newValue.substring(0, 5);
                    }
                    
                    input.value = newValue;

                    // Ajusta a posição do cursor
                    let newPos = start;
                    if (oldValue.length < newValue.length && start === 2) newPos++;
                    if (oldValue.length > newValue.length && oldValue.charAt(start-1) === ':' && start > 1) newPos--;
                    input.setSelectionRange(newPos, newPos);
                }
            }

            dataEncontradoInput.addEventListener('input', () => formatInput(dataEncontradoInput));
            horaEncontradoInput.addEventListener('input', () => formatInput(horaEncontradoInput));
        }
    </script>
</body>
</html>
